searchState.loadedDescShard("tokio", 0, "A runtime for writing reliable network applications …\nTraits, helpers, and type definitions for asynchronous I/O …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nThe Tokio runtime.\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nAsynchronous green-threads.\nDeclares a new task-local key of type <code>tokio::task::LocalKey</code>…\nUtilities for tracking time.\nReads bytes asynchronously.\nReads bytes from a source.\nSeek bytes asynchronously.\nWrites bytes asynchronously.\nA wrapper around a byte buffer that is incrementally …\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns the total capacity of the buffer.\nClears the buffer, resetting the filled region to empty.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nReturns the argument unchanged.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nDetermines if this writer has an efficient …\nDetermines if this writer has an efficient …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nReturns the number of bytes at the end of the slice that …\nSets the size of the filled region of the buffer.\nAttempts to seek to an offset, in bytes, in a stream.\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a buffer that may be …\nConverts or resolves without blocking to one or more …\nBuilds Tokio Runtime with custom configuration values.\nThe flavor that executes all tasks on the current thread.\nRuntime context guard.\nHandle to the runtime.\nThe flavor that executes tasks across multiple threads.\nThe Tokio runtime.\nThe flavor of a <code>Runtime</code>.\nHandle to the runtime’s metrics.\nError returned by <code>try_current</code> when no Runtime has been …\nRuns a future to completion on this <code>Handle</code>’s associated …\nRuns a future to completion on the Tokio runtime. This is …\nCreates the configured <code>Runtime</code>.\nReturns a <code>Handle</code> view over the currently running <code>Runtime</code>.\nEnables both I/O and time drivers.\nEnables the time driver.\nEnters the runtime context. This allows you to construct …\nEnters the runtime context.\nSets the number of scheduler ticks after which the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of tasks currently scheduled in the …\nSets the number of scheduler ticks after which the …\nReturns a handle to the runtime’s spawner.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the call failed because there is currently …\nReturns true if the call failed because the Tokio context …\nSpecifies the limit for additional threads spawned by the …\nReturns a view that lets you get information about how the …\nReturns a view that lets you get information about how the …\nCreates a new runtime instance with default configuration …\nReturns a new builder with the current thread scheduler …\nReturns a new builder with the multi thread scheduler …\nReturns the current number of alive tasks in the runtime.\nReturns the number of worker threads used by the runtime.\nExecutes function <code>f</code> just before a thread is parked (goes …\nExecutes function <code>f</code> after each thread is started but …\nExecutes function <code>f</code> before each thread stops.\nExecutes function <code>f</code> just after a thread unparks (starts …\nReturns the flavor of the current <code>Runtime</code>.\nShuts down the runtime, without waiting for any spawned …\nShuts down the runtime, waiting for at most <code>duration</code> for …\nSpawns a future onto the Tokio runtime.\nSpawns a future onto the Tokio runtime.\nRuns the provided function on an executor dedicated to …\nRuns the provided function on an executor dedicated to …\nSets a custom timeout for a thread in the blocking pool.\nSets name of threads spawned by the <code>Runtime</code>’s thread …\nSets a function used to generate the name of threads …\nSets the stack size (in bytes) for worker threads.\nReturns a Handle view over the currently running Runtime\nSets the number of worker threads the <code>Runtime</code> will use.\nAn owned permission to abort a spawned task, without …\nAn opaque ID that uniquely identifies a task relative to …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA collection of tasks spawned on a Tokio runtime.\nContext guard for <code>LocalSet</code>\nA key for task-local data.\nA set of tasks which are executed on the same thread.\nAbort the task associated with the handle.\nAbort the task associated with the handle.\nAborts all tasks on this <code>JoinSet</code>.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nRuns the provided blocking function on the current thread …\nRuns a future to completion on the provided runtime, …\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nUtilities for improved cooperative scheduling.\nRemoves all tasks from this <code>JoinSet</code> without aborting them.\nEnters the context of this <code>LocalSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTask-related futures.\nReturns a copy of the task-local value if the task-local …\nReturns the <code>Id</code> of the currently running task.\nReturns a task ID that uniquely identifies this task …\nReturns a task ID that identifies the task which errored …\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nReturns whether the <code>JoinSet</code> is empty.\nChecks if the task associated with this <code>AbortHandle</code> has …\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nAwaits the completion of all tasks in this <code>JoinSet</code>, …\nWaits until one of the tasks in the set completes and …\nWaits until one of the tasks in the set completes and …\nReturns the number of tasks currently in the <code>JoinSet</code>.\nCreate a new <code>JoinSet</code>.\nReturns a new local task set.\nPolls for one of the tasks in the set to complete.\nPolls for one of the tasks in the set to complete.\nRuns a future to completion on the local set, returning …\nSets a value <code>T</code> as the task-local value for the future <code>F</code>.\nAborts all tasks and waits for them to finish shutting …\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nSpawn the provided task on the <code>JoinSet</code>, returning an …\nRuns the provided closure on a thread where blocking is …\nSpawn the blocking code on the blocking threadpool and …\nSpawn the blocking code on the blocking threadpool of the …\nSpawns a <code>!Send</code> future on the current <code>LocalSet</code> or …\nSpawn the provided task on the current <code>LocalSet</code> and store …\nSpawns a <code>!Send</code> task onto the local task set.\nSpawn the provided task on the provided <code>LocalSet</code> and store …\nSpawn the provided task on the provided runtime and store …\nSets a value <code>T</code> as the task-local value for the closure <code>F</code>.\nReturns the <code>Id</code> of the currently running task, or <code>None</code> if …\nConsumes the join error, returning the object with which …\nTries to join one of the tasks in the set that has …\nTries to join one of the tasks in the set that has …\nAccesses the current task-local and runs the provided …\nAccesses the current task-local and runs the provided …\nYields execution back to the Tokio runtime.\nFuture for the <code>unconstrained</code> method.\nConsumes a unit of budget and returns the execution back …\nReturns the argument unchanged.\nReturns <code>true</code> if there is still budget left on the task.\nCalls <code>U::from(self)</code>.\nTurn off cooperative scheduling for a future. The future …\nA future that sets a value <code>T</code> of a task local for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value stored in the task local by this …\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the instant at which the future will complete.\nReturns <code>MissedTickBehavior::Burst</code>.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nTime error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nReturns the amount of time elapsed from another instant to …\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nErrors returned by <code>Timeout</code>.\nErrors encountered by the timer implementation.\nCreates an error representing a timer at capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error representing a misconfigured timer.\nReturns <code>true</code> if the error was caused by the timer being at …\nReturns <code>true</code> if the error was caused by the timer being …\nReturns <code>true</code> if the error was caused by the timer being …\nCreates an error representing a shutdown timer.")