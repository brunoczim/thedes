searchState.loadedDescShard("signal_hook", 0, "Library for easier and safe Unix signal handling\nAn ID of registered action.\nThe low-level constants.\nModule for actions setting flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator over incoming signals.\nSome low level utilities\nList of forbidden signals.\nVarious signals commonly requesting shutdown of an …\nThe signal constants.\nRegisters an action to set the flag to <code>true</code> whenever the …\nConditionally runs an emulation of the default action on …\nTerminate the application on a signal if the given …\nRegisters an action to set the flag to the given value …\nAn infinite iterator of arriving signals.\nA type alias for an iterator returning just the signal …\nThe main structure of the module, representing interest in …\nRegisters another signal to the set watched by this <code>Signals</code>…\nA backend module for implementing the iterator like …\nAn abstraction over exfiltrating information out of signal …\nGet an infinite iterator over arriving signals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a shareable handle to a <code>Handle</code> for this instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs it closed?\nCreates the <code>Signals</code> structure.\nReturns an iterator of already received signals.\nWaits for some signals to be available and returns an …\nAn advanced constructor with explicit <code>Exfiltrator</code>.\nThe iterator was closed. There won’t be any signals …\nAn error happened during polling for arrived signals.\nA struct to control an instance of an associated type …\nA signal iterator which consumes a <code>SignalDelivery</code> instance …\nThe iterator of one batch of signals.\nThere are no signals yet but there may arrive some in the …\nPossible results of the <code>poll_signal</code> function.\nA signal iterator which takes a mutable reference to a …\nA signal arrived\nA struct for delivering received signals to the main …\nAn infinite iterator of received signals.\nRegisters another signal to the set watched by the …\nCloses the associated instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the read end of the self pipe\nGet a mutable reference to the read end of the self pipe\nGet a shareable <code>Handle</code> for this instance.\nGet a <code>Handle</code> for this <code>SignalDelivery</code> instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs it closed?\nCreate a new infinite iterator for signals registered with …\nReturns an iterator of already received signals.\nChecks the reading end of the self pipe for available …\nReturn a signal if there is one or tell the caller that …\nCreates the <code>SignalDelivery</code> structure.\nA trait describing what and how is extracted from signal …\nAn <code>Exfiltrator</code> providing just the signal numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn exfiltrator providing the raw <code>siginfo_t</code>.\nThe <code>Exfiltrator</code> that produces the raw <code>libc::siginfo_t</code>. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA bare libc abort.\nA restricted channel to pass data from signal handler.\nEmulates the behaviour of a default handler for the …\nA bare libc exit.\nModule with the self-pipe pattern.\nThe usual raise, just the safe wrapper around it.\nRegisters an arbitrary action for the given signal.\nProvides a human-readable name of a signal.\nRemoves a previously installed action.\nA restricted async-signal-safe channel\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new channel with nothing in it.\nTakes a value from the channel.\nInserts a value into the channel.\nRegisters a write to a self-pipe whenever there’s the …\nRegisters a write to a self-pipe whenever there’s the …")