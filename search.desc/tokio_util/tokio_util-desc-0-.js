searchState.loadedDescShard("tokio_util", 0, "Utilities for working with Tokio.\nTokio context aware futures utilities.\nModule defining an Either type.\nSynchronization primitives\nExtra utilities for spawning tasks\nExtension trait that simplifies bundling a <code>Handle</code> with a …\n<code>TokioContext</code> allows running futures that must be inside …\nReturns the argument unchanged.\nObtain a reference to the handle inside this <code>TokioContext</code>.\nCalls <code>U::from(self)</code>.\nRemove the association between the Tokio runtime and the …\nAssociate the provided future with the context of the …\nCreate a <code>TokioContext</code> that wraps the provided future and …\nCombines two different futures, streams, or sinks having …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA token which can be used to signal a cancellation request …\nA wrapper for cancellation token which automatically …\nA wrapper around <code>Semaphore</code> that provides a <code>poll_acquire</code> …\nError returned by the <code>PollSender</code> when the channel is …\nA wrapper around <code>mpsc::Sender</code> that can be polled.\nA reusable <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + &#39;a&gt;&gt;</code>.\nA Future that is resolved once the corresponding …\nA Future that is resolved once the corresponding …\nAborts the current in-progress send, if any.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nCancel the <code>CancellationToken</code> and all child tokens which …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nCreates a <code>CancellationToken</code> which will get cancelled …\nCreates a clone of the <code>CancellationToken</code> which will get …\nClones this <code>PollSender</code>.\nObtain a clone of the inner semaphore.\nCloses the semaphore.\nCloses this sender.\nReturns stored cancellation token and removes this drop …\nCreates a <code>DropGuard</code> for this token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a pinned reference to the underlying future.\nGets a reference to the <code>Sender</code> of the underlying channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner semaphore.\nConsumes the stored value, if any.\nReturns <code>true</code> if the <code>CancellationToken</code> is cancelled.\nChecks whether this sender is been closed.\nCreates a new <code>CancellationToken</code> in the non-cancelled state.\nCreate a new <code>PollSemaphore</code>.\nCreate a new <code>ReusableBoxFuture&lt;T&gt;</code> containing the provided …\nCreates a new <code>PollSender</code>.\nPoll the future stored inside this box.\nPoll the future stored inside this box.\nPoll to acquire a permit from the semaphore.\nPoll to acquire many permits from the semaphore.\nAttempts to prepare the sender to receive a value.\nRuns a future to completion and returns its result wrapped …\nRuns a future to completion and returns its result wrapped …\nSends an item to the channel.\nReplace the future currently stored in this box.\nReplace the future currently stored in this box.\nA wrapper around a <code>tokio::task::JoinHandle</code>, which aborts …\nA cloneable handle to a local pool, used for spawning <code>!Send</code>…\nAbort the task associated with this handle, equivalent to …\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of tasks scheduled on each worker. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the task associated with this handle is finished,\nCreate a new pool of threads to handle <code>!Send</code> tasks. Spawn …\nCreate an <code>AbortOnDropHandle</code> from a <code>JoinHandle</code>.\nReturns the number of threads of the Pool.\nSpawn a task onto a worker thread and pin it there so it …\nDiffers from <code>spawn_pinned</code> only in that you can choose a …\nTypes related to the <code>TaskTracker</code> collection.\nA task tracker used for waiting until tasks exit.\nRepresents a task tracked by a <code>TaskTracker</code>.\nA future that completes when the <code>TaskTracker</code> is empty and …\nA future that is tracked as a task by a <code>TaskTracker</code>.\nReturns a new <code>TaskTracker</code> that tracks the same set of …\nReturns a new <code>TaskTrackerToken</code> associated with the same …\nClose this <code>TaskTracker</code>.\nCreates a new <code>TaskTracker</code>.\nDropping the token indicates to the <code>TaskTracker</code> that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>TaskTracker</code> is closed.\nReturns <code>true</code> if there are no tasks in this <code>TaskTracker</code>.\nReturns the number of tasks tracked by this <code>TaskTracker</code>.\nCreates a new <code>TaskTracker</code>.\nReturns <code>true</code> if both task trackers correspond to the same …\nReopen this <code>TaskTracker</code>.\nSpawn the provided future on the current Tokio runtime, …\nSpawn the provided blocking task on the current Tokio …\nSpawn the provided blocking task on the provided Tokio …\nSpawn the provided future on the current <code>LocalSet</code>, and …\nSpawn the provided future on the provided <code>LocalSet</code>, and …\nSpawn the provided future on the provided Tokio runtime, …\nReturns the <code>TaskTracker</code> that this token is associated with.\nCreates a <code>TaskTrackerToken</code> representing a task tracked by …\nTrack the provided future.\nWaits until this <code>TaskTracker</code> is both closed and empty.")